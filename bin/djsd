#!/usr/bin/ruby

if (%w( -h --help -help help ) & ARGV).length > 0
  puts "usage: djsd [-hv]"
  puts "starts dotjs server in the foreground. kill with ^C"
  exit
end

if ARGV.include?('-v')
  puts "djsd 2.0"
  exit
end

require 'openssl'
require 'webrick'
require 'webrick/https'

dotjs = Class.new(WEBrick::HTTPServlet::AbstractServlet) do
  def do_GET(request, response)
    body = build_body(request.path.gsub(/\/|\.js$/,''))

    response.status = body.empty? ? 204 : 200
    if origin = detect_origin(request)
      response['Access-Control-Allow-Origin'] = origin
    end
    response['Content-Type'] = 'text/javascript'
    response.body = body
  end

  def build_body(domain)
    files = []
    add = lambda {|file| files << file if File.file?(file) }

    paths = domain.split('.')
    until paths.empty?
      sub = paths.join('.')
      if sub == domain
        Dir["#{sub}/*.js"].reverse.each {|file| add.call(file) }
      end
      Dir[".#{sub}/*.js"].reverse.each {|file| add.call(file) }
      paths.shift
    end

    Dir['ALL/*.js'].reverse.each {|file| add.call(file) }

    body = "// dotjs is working! //\n"

    files.reverse.each do |file|
      path = File.expand_path(file)
      body << "// File: #{file}\n#{ File.read(path) }\n"
    end

    body
  end

  def detect_origin(req)
    path   = req.path
    origin = req.header['origin']
    search = path.gsub('/','').gsub(/\.js$/,'') + '$'

    if origin.length == 1 && path.length != 1 && origin[0].match(search)
      origin[0]
    end
  end
end

ssl_key = ssl_cert = nil

home_path = ENV.fetch("HOME")
config_path = File.join(home_path, ".config", "dotjs")
ssl_key_path = File.join(config_path, "server.key")
ssl_cert_path = File.join(config_path, "server.crt")
ssl_key = OpenSSL::PKey.read(IO.read(ssl_key_path))
ssl_cert = OpenSSL::X509::Certificate.new(IO.read(ssl_cert_path))

server_options = {
  :BindAddress => "localhost",
  :Port => 3131,
  :AccessLog => [],
  :SSLEnable => true,
  :SSLPrivateKey => ssl_key,
  :SSLCertificate => ssl_cert,
}

server = WEBrick::HTTPServer.new(server_options)
server.mount('/', dotjs)

%w( INT TERM ).each do |sig|
  trap(sig) { server.shutdown }
end

server.start
